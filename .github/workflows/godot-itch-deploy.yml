name: godot-itch-deploy
on:
  workflow_call:
      inputs:
        version_string:
          description: 'Name of the Version to set in itch'     
          required: false
          type: string
        tag_name:
          description: 'Name of the tag from which to pull the release files'
          required: true
          type: string
        itch_project:
          description: 'Name of the itch project you'll be deploying to'
          required: true
          type: string
jobs:
  deploy_to_itch:
    runs-on: ubuntu-latest
    name: Itch Deploy
    steps:
      - name: Install Butler
        id: install_butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default \
          && unzip butler.zip \
          && sudo cp butler /usr/bin \
          && sudo chmod +x /usr/bin/butler
      - name: Run Butler Push
        id: butler_push
        run: |
          set -e
          export BUTLER_API_KEY=$BUTLER_CREDENTIALS
          versionArgument=""
          if [ -n "$VERSION" ]; then
              versionArgument="--userversion ${VERSION}"
          elif [ -n "$VERSION_FILE" ]; then
              versionArgument="--userversion-file ${VERSION_FILE}"
          fi
          if [ -n "$HTML5" ]; then
              if [ test -f "$BASE_URL/$HTML5" ]; then
                echo "butler push \"$BASE_URL/$HTML5\" $ITCH_USER/$ITCH_GAME:html5 ${versionArgument}"
                butler push "$BASE_URL/$HTML5" $ITCH_USER/$ITCH_GAME:html5 ${versionArgument}
              else
                echo "WARN: Unable to find $"$BASE_URL/$HTML5". Skipping
              fi
          fi
          if [ -n "$WIN" ]; then
              if [ test -f "$BASE_URL/$HTML5" ]; then
                echo "butler push \"$BASE_URL/$WIN\" $ITCH_USER/$ITCH_GAME:windows ${versionArgument}"
                butler push "$BASE_URL/$WIN" $ITCH_USER/$ITCH_GAME:windows ${versionArgument}
              else
                echo "WARN: Unable to find $"$BASE_URL/$WIN". Skipping
              fi
          fi
          if [ -n "$OSX" ]; then
              if [ test -f "$BASE_URL/$HTML5" ]; then
                echo "butler push \"$BASE_URL/$OSX\" $ITCH_USER/$ITCH_GAME:mac ${versionArgument}"
                butler push "$BASE_URL/$OSX" $ITCH_USER/$ITCH_GAME:mac ${versionArgument}
              else
                echo "WARN: Unable to find $"$BASE_URL/$OSX". Skipping
              fi
          fi
          if [ -n "$LNX" ]; then
              if [ test -f "$BASE_URL/$HTML5" ]; then
                echo "butler push \"$BASE_URL/$LNX\" $ITCH_USER/$ITCH_GAME:linux ${versionArgument}"
                butler push "$BASE_URL/$LNX" $ITCH_USER/$ITCH_GAME:linux ${versionArgument}
              else
                echo "WARN: Unable to find $"$BASE_URL/$LNX". Skipping
              fi
          fi
          if [ -n "$ANDROID" ]; then
              if [ test -f "$BASE_URL/$HTML5" ]; then
                echo "butler push \"$BASE_URL/$ANDROID\" $ITCH_USER/$ITCH_GAME:android ${versionArgument}"
                butler push "$BASE_URL/$ANDROID" $ITCH_USER/$ITCH_GAME:android ${versionArgument}
              else
                echo "WARN: Unable to find $"$BASE_URL/$ANDROID". Skipping
              fi
          fi
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          ITCH_USER: pixelbyte
          BASE_URL: ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ inputs.tag_name }}
          ITCH_GAME: ${{ inputs.itch_project }}
          HTML5: HTML5.zip
          WIN: Windows.zip
          # OSX: Mac-Osx.zip
          # LNX: Linux.zip
          # ANDROID: Android.zip
          #Set the itch deploy version to the tag text
          #assumes  we use this step in a workflow with a tag_version step
          VERSION: ${{ inputs.version_string }}